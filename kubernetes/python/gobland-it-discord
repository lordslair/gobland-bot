#!/usr/bin/python3 -u
import re
import discord
import sys
import os
import asyncio
import inspect

from queries import *
from datetime import datetime,timedelta

token    = os.environ['TOKEN']
client   = discord.Client()
channels = ['les-rabatteurs']

@client.event
async def on_ready():
    print('Logged in as', file=sys.stderr)
    print(client.user.name, file=sys.stderr)
    print(client.user.id, file=sys.stderr)
    print('------', file=sys.stderr)

@client.event
async def on_message(message):

    # we do not want the bot to reply outside registered clan channels
    channel = str(message.channel)
    if channel not in channels:
        return
    else:
        # Select the right DB depending of the channel
        if channel == 'les-rabatteurs':
            db_name   = '32'

    # we do not want the bot to reply to itself
    if message.author == client.user:
        return

    if message.content.startswith('!!help'):
        print('[{}] !!help'.format(message.author))
        h_oukilest = '!!oulikest ID  -> Renvoie la position de <ID>\n'
        h_cdm      = '!!cdm ID       -> Renvoie la dernière CdM de <ID>\n'
        help       = '```' + h_oukilest + h_cdm + '```'
        await message.channel.send(help)

    elif message.content.startswith('!!oukilest'):
        m = re.match(r"!!oukilest (?P<id>\d*)", message.content)
        if m is not None:
            print('[{}] !!oukilest {}'.format(message.author,m.group('id')))
            stats = oukilest(m.group('id'),db_name)
            if stats:
                # Id,Nom,Niveau,Type,Clan,X,Y,N,Z
                id   = stats[0]
                name = stats[1]
                niv  = stats[2]
                x    = stats[5]
                y    = stats[6]
                n    = stats[7]
                msgLine  = '[{}] {} ({}) : [ {:>4} | {:>4} | {:>4} ]'.format(id,name,niv,x,y,n)
                answer   = '```' + msgLine + '```'
            else:
                answer   = 'Informations non trouvées en DB(' + db_name + ') pour ID: ' + m.group('id')
            await message.channel.send(answer)
        else:
            answer   = '<ID> n\'est pas un nombre entier [REGEX: (\d*)]'
        print ('[{}] !!oukilest {}'.format(message.author,answer))

    elif message.content.startswith('!!cdm'):
        m = re.match(r"!!cdm (?P<id>\d*)", message.content)
        if m is not None:
            print('[{}] !!cdm {}'.format(message.author,m.group('id')))
            stats = cdm(m.group('id'),db_name)
            if stats:

                # Looking for position if the mob is in Vue
                pos = oukilest(m.group('id'),db_name)
                if pos:
                    x      = stats[5]
                    y      = stats[6]
                    n      = stats[7]
                    msgpos = '[ {:>4} | {:>4} | {:>4} ]'.format(x,y,n)

                # Id,Date,IdMob,Name,Niveau,Type,PVMin,PVMax,Blessure,
                # ATTMin,ATTMax,ESQMin,ESQMax,DEGMin,DEGMax
                # REGMin,REGMax,ARMMin,ARMmax,PERMin,PERMax

                date = stats[1]
                id   = stats[2]
                name = stats[3]
                niv  = stats[5]

                pvs = '{}-{}'.format(stats[6],stats[7])
                att = '{}-{}'.format(stats[9],stats[10])
                esq = '{}-{}'.format(stats[11],stats[12])
                deg = '{}-{}'.format(stats[13],stats[14])
                reg = '{}-{}'.format(stats[15],stats[16])
                arm = '{}-{}'.format(stats[17],stats[18])
                per = '{}-{}'.format(stats[19],stats[20])

                if pos:
                    msgLine  = '[{}] {} ({}) : {}\n'.format(id,name,niv,msgpos)
                else:
                    msgLine  = '[{}] {} ({})\n'.format(id,name,niv)

                msgdate  = 'CdM : {}\n'.format(date)
                msgpvs   = 'PVs : {} (~{}%)\n'.format(pvs,stats[8])
                msgatt   = 'ATT : {}\n'.format(att)
                msgdeg   = 'DEG : {}\n'.format(deg)
                msgesq   = 'ESQ : {}\n'.format(esq)
                msgreg   = 'REG : {}\n'.format(reg)
                msgarm   = 'Arm : {}\n'.format(arm)
                msgper   = 'PER : {}\n'.format(per)

                answer   = '```' + msgLine + msgdate + msgpvs + msgatt + msgdeg + msgesq + msgreg + msgarm + msgper + '```'
            else:
                answer   = 'Informations non trouvées en DB(' + db_name + ') pour ID: ' + m.group('id')
            await message.channel.send(answer)
        else:
            answer   = '<ID> n\'est pas un nombre entier [REGEX: (\d*)]'
        print ('[{}] !!cdm {}'.format(message.author, '```' + answer.rstrip() + '```'))

# Tasks definitions

async def task_5min_kills():
    while client.is_ready:
        for channel_name in channels:
            then     = datetime.now() - timedelta(minutes=5)
            then_str = then.strftime("%Y-%m-%d %H:%M:%S")

            if channel_name == 'les-rabatteurs':
                db_name = '32'
                channel = discord.utils.get(client.get_all_channels(), name='les-rabatteurs')
            else:
                return

            if channel: print('{} {:<20} {}'.format(then_str, '[' + inspect.stack()[0][3] + ']', channel))

            infos = kills(then_str,db_name)
            if infos and channel:
                for row in infos:
                    # Id,Date,IdMob,NomMob,IdGob,NomGob,PMSubject,PMText
                    id     = row[0]
                    date   = row[1]
                    idmob  = row[2]
                    nommob = row[3]
                    idgob  = row[4]
                    nomgob = row[5]
                    icon   = ':skull_crossbones:'
                    msgLine  = '{} {} a tué [{}] {}'.format(icon,nomgob,idmob,nommob)
                    answer   = msgLine
                    print('[task_5min_kills]', channel, then_str, '|', answer)

                if channel:
                    await channel.send(answer)

        await asyncio.sleep(300) # task runs every 300 seconds / 5 minutes

async def task_5min_baratins():
    while client.is_ready:
        for channel_name in channels:
            then     = datetime.now() - timedelta(minutes=5)
            then_str = then.strftime("%Y-%m-%d %H:%M:%S")

            if channel_name == 'les-rabatteurs':
                db_name = '32'
                channel = discord.utils.get(client.get_all_channels(), name='les-rabatteurs')
            else:
                return

            if channel: print('{} {:<20} {}'.format(then_str, '[' + inspect.stack()[0][3] + ']', channel))

            infos = baratins(then_str,db_name)
            if infos and channel:
                for row in infos:
                    # IdGob,Gobelin,PMSubject,PMDate,PMText
                    idgob   = row[0]
                    nomgob  = row[1]
                    subject = row[2]
                    icon   = ':cyclone:'

                    m = re.match(r"Résultat Baratin - (?P<nommob>\S*) \((?P<idmob>\d*)\)", subject)
                    if m is not None:
                        nommob = m.group('nommob')
                        idmob  = m.group('idmob')

                        msgLine  = '{} {} a baratiné [{}] {}'.format(icon,nomgob,idmob,nommob)
                        answer   = msgLine
                        print('[task_5min_baratins]', channel, then_str, '|', answer)

                        if channel:
                            await channel.send(answer)

        await asyncio.sleep(300) # task runs every 300 seconds / 5 minutes

async def task_5min_wounded():
    while client.is_ready:
        for channel_name in channels:
            then     = datetime.now() - timedelta(minutes=5)
            then_str = then.strftime("%Y-%m-%d %H:%M:%S")

            if channel_name == 'les-rabatteurs':
                db_name = '32'
                channel = discord.utils.get(client.get_all_channels(), name='les-rabatteurs')
            else:
                return

            if channel: print('{} {:<20} {}'.format(then_str, '[' + inspect.stack()[0][3] + ']', channel))

            stats = wounded(then_str,db_name)
            if stats and channel:
                for row in stats:
                    # IdMob,Name,Niveau,Blessure,Date
                    idmob  = row[0]
                    nommob = row[1]
                    niv    = row[2]
                    bless  = row[3]
                    icon   = ':dart:'

                    msgLine  = '{} [{}] {} est à finir (Blessé à {}%)'.format(icon,idmob,nommob,bless)
                    answer   = msgLine
                    print('[task_5min_wounded]', channel, then_str, '|', answer)

                    if channel:
                        await channel.send(answer)

        await asyncio.sleep(300) # task runs every 300 seconds / 5 minutes

client.loop.create_task(task_5min_kills())
client.loop.create_task(task_5min_baratins())
client.loop.create_task(task_5min_wounded())
client.run(token)
