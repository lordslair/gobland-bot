#!/usr/bin/python3
import re
import discord
import sys
import os
import asyncio

from queries import *
from datetime import datetime,timedelta

token  = os.environ['TOKEN_32']
client = discord.Client()
db_name   = '32'

@client.event
async def on_ready():
    print('Logged in as', file=sys.stderr)
    print(client.user.name, file=sys.stderr)
    print(client.user.id, file=sys.stderr)
    print(db_name, file=sys.stderr)
    print('------', file=sys.stderr)

@client.event
async def on_message(message):
    # we do not want the bot to reply to itself
    if message.author == client.user:
        return

    if message.content.startswith('!!help'):
        print('[{}] !!help'.format(message.author))
        h_oukilest = '!!oulikest ID  -> Renvoie la position de <ID>\n'
        h_cdm      = '!!cdm ID       -> Renvoie la dernière CdM de <ID>\n'
        help       = '```' + h_oukilest + h_cdm + '```'
        await message.channel.send(help)

    elif message.content.startswith('!!oukilest'):
        print('[{}] !!oukilest'.format(message.author))
        m = re.match(r"!!oukilest (?P<id>\d*)", message.content)
        if m is not None:
            print('[{}] !!oukilest {}'.format(message.author,m.group('id')))
            stats = oukilest(m.group('id'))
            if stats:
                # Id,Nom,Niveau,Type,Clan,X,Y,N,Z
                id   = stats[0]
                name = stats[1]
                niv  = stats[2]
                x    = stats[5]
                y    = stats[6]
                n    = stats[7]
                msgLine  = '[{}] {} ({}) : [ {:>4} | {:>4} | {:>4} ]\n'.format(id,name,niv,x,y,n)
                answer   = '```' + msgLine + '```'
                await message.channel.send(answer)
            else:
                await message.channel.send('Informations non trouvées en DB pour ID: ' + m.group('id'))

    elif message.content.startswith('!!cdm'):
        print('[{}] !!cdm'.format(message.author))
        m = re.match(r"!!cdm (?P<id>\d*)", message.content)
        if m is not None:
            print('[{}] !!cdm {}'.format(message.author,m.group('id')))
            stats = cdm(m.group('id'))
            if stats:

                # Looking for position if the mob is in Vue
                pos = oukilest(m.group('id'))
                if pos:
                    x      = stats[5]
                    y      = stats[6]
                    n      = stats[7]
                    msgpos = '[ {:>4} | {:>4} | {:>4} ]'.format(x,y,n)

                # Id,Date,IdMob,Name,Niveau,Type,PVMin,PVMax,Blessure,
                # ATTMin,ATTMax,ESQMin,ESQMax,DEGMin,DEGMax
                # REGMin,REGMax,ARMMin,ARMmax,PERMin,PERMax

                date = stats[1]
                id   = stats[2]
                name = stats[3]
                niv  = stats[5]

                pvs = '{}-{}'.format(stats[6],stats[7])
                att = '{}-{}'.format(stats[9],stats[10])
                esq = '{}-{}'.format(stats[11],stats[12])
                deg = '{}-{}'.format(stats[13],stats[14])
                reg = '{}-{}'.format(stats[15],stats[16])
                arm = '{}-{}'.format(stats[17],stats[18])
                per = '{}-{}'.format(stats[19],stats[20])

                if pos:
                    msgLine  = '[{}] {} ({}) : {}\n'.format(id,name,niv,msgpos)
                else:
                    msgLine  = '[{}] {} ({})\n'.format(id,name,niv)

                msgdate  = 'CdM : {}\n'.format(date)
                msgpvs   = 'PVs : {} (~{}%)\n'.format(pvs,stats[8])
                msgatt   = 'ATT : {}\n'.format(att)
                msgdeg   = 'DEG : {}\n'.format(deg)
                msgesq   = 'ESQ : {}\n'.format(esq)
                msgreg   = 'REG : {}\n'.format(reg)
                msgarm   = 'Arm : {}\n'.format(arm)
                msgper   = 'PER : {}\n'.format(per)

                answer   = '```' + msgLine + msgdate + msgpvs + msgatt + msgdeg + msgesq + msgreg + msgarm + msgper + '```'
                await message.channel.send(answer)
            else:
                await message.channel.send('Informations non trouvées en DB pour ID: ' + m.group('id'))

# Tasks definitions

async def task_5min_kills():
    while client.is_ready:
        channel = discord.utils.get(client.get_all_channels(), name='general')
        then     = datetime.now() - timedelta(minutes=5)
        then_str = then.strftime("%Y-%m-%d %H:%M:%S")

        infos = kills(then_str)
        if infos:
            for row in infos:
                # Id,Date,IdMob,NomMob,IdGob,NomGob,PMSubject,PMText
                id     = row[0]
                date   = row[1]
                idmob  = row[2]
                nommob = row[3]
                idgob  = row[4]
                nomgob = row[5]
                icon   = ':skull_crossbones:'
                msgLine  = '{} {} a tué [{}] {}'.format(icon,nomgob,idmob,nommob)
                answer   = msgLine
                print('[task_5min_kills]', then_str, '|', answer)

                if channel:
                    await channel.send(answer)

        await asyncio.sleep(300) # task runs every 300 seconds / 5 minutes

client.loop.create_task(task_5min_kills())
client.run(token)
